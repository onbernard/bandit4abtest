% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/policy_ucb.R
\name{policy_ucb}
\alias{policy_ucb}
\title{Upper Confidence Bound algorithm}
\usage{
policy_ucb(visitor_reward, alpha = 1)
}
\arguments{
\item{visitor_reward}{Dataframe of numeric values}

\item{alpha}{Numeric value. Exploration parameter (optional)}
}
\value{
\itemize{ List of element:
 \item S         : Means and trials matrix
 \item choice    : Choice history vector
 \item proba     : Max probability history vector
 \item time      : Computation time
 \item theta_hat : Final estimated reward expectation of each arm
 \item theta     : Actual reward expectation of each arm}
}
\description{
The Upper Confidence Bound algorithm is used in stochastic bandit
 with finitely many arms problems. It attributes to each arm an upper bound
 of its reward expectation according to past rewards and number of trials.

 \itemize{ At each iteration
 \item Computes the upper confidence bounds
 \item Chooses the arm with the maximum upper bound (with alpha parameter)
 \item Receives a reward in visitor_reward for the arm and associated
 iteration
 \item Updates the means and number of trials
 }

 The function keeps track of each arm estimated reward expectation and number
 of trials. These are returned at the end of the computation in addition to
 the arm played and at each iteration, the actual reward expectations and the
 computation time.

 See also \code{\link{generate_matrix_S}}, \code{\link{proba_max_for_ucb}}
 and \code{\link{play_arm}}.

 Reward input is checked for correct dimensions and values. See
 \code{\link{bandit_reward_control}}.
}
\examples{
## Generate 10000 numbers from 2 binomial  distributions
set.seed(4434)
K1 <- rbinom(1000, 1, 0.6)
K2 <- rbinom(1000, 1, 0.7)
## Create a dataframe of rewards
visitor_reward <- as.data.frame(cbind(K1,K2) )
#Run UCB algorithm
ucb_alloc  <- policy_ucb(visitor_reward,alpha = 10)
ucb_alloc$S
barplot(table(ucb_alloc$choice),main = "Histogram of choices",xlab="arm")
#Upper bound for arm 2 according iterations (red line is the real mean)
plot(x=c(1:length(ucb_alloc$choice[ucb_alloc$choice==2])),
  ucb_alloc$proba[ucb_alloc$choice==2],
  type='l',xlab = 'Time',ylab = 'Upper bound of arm 2')
  lines(c(1:length(ucb_alloc$choice[ucb_alloc$choice==2])),rep(mean(K2),
  length(ucb_alloc$choice[ucb_alloc$choice==2])),col="red")
ucb_alloc$time
ucb_alloc$theta_hat
ucb_alloc$theta

}
