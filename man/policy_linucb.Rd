% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/policy_linucb.R
\name{policy_linucb}
\alias{policy_linucb}
\title{LINUCB algorithm}
\usage{
policy_linucb(dt, visitor_reward, alpha = 1)
}
\arguments{
\item{dt}{Context data. Dataframe of integer or numeric values}

\item{visitor_reward}{Reward data. Dataframe of integer or numeric values}

\item{alpha}{Exploration parameter. Numeric value (optional)}
}
\value{
\itemize{ List of element:
 \item choice    : Choice history vector
 \item proba     : Max probability history vector
 \item time      : Computation time
 \item theta_hat : Final estimated theta
 \item theta     : Actual theta}
}
\description{
The Linear Upper Confidence Bound algorithm is used to solve
 contextual bandit problem. It assumes an unknown linear dependence theta
 exists context and reward data. Said dependance is modeled through a
 regression when processing a dataframe of contexts and a dataframe of
 rewards representing a bandit.

 The function keeps track of the arm choice and associated max probability at
 each iteration. These are returned at the end of the computation in addition
 to the actual and estimated theta and the computation time. See
 \code{\link{return_real_theta}}.

 Reward and context inputs atre checked for correct dimensions and values.
 See \code{\link{bandit_reward_control}} and
 \code{\link{data_control_context_reward}}.
}
\examples{
size.tot = 1000
# this makes the example exactly reproducible
set.seed(4649)
# you have 4, largely uncorrelated predictors
x1 = runif(size.tot, min=0, max=10)
x2 = runif(size.tot, min=0, max=10)
x3 = runif(size.tot, min=0, max=10)
x4 = runif(size.tot, min=0, max=10)
dt = cbind(x1,x2,x3,x4)
#arm reward
arm_1 <-  as.vector(c(-1,9,-8,4))
K1 = crossprod(t(dt),arm_1)
arm_2 <-  as.vector(c(-1,2,1,0))
K2 = crossprod(t(dt),arm_2)
arm_3 <-  as.vector(c(-1,-5,1,10))
K3 = crossprod(t(dt),arm_3)
visitor_reward <-  data.frame(K1,K2,K3)
dt <- as.data.frame(dt)
policy_linucb(dt,visitor_reward)

}
