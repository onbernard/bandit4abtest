% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/policy_epsilon_greedy.R
\name{policy_epsilon_greedy}
\alias{policy_epsilon_greedy}
\title{Epsilon Greedy algorithm}
\usage{
policy_epsilon_greedy(visitor_reward, epsilon = 0.25)
}
\arguments{
\item{visitor_reward}{Dataframe of integer or numeric values}

\item{epsilon}{Numeric value. Exploration parameter (optional)}
}
\value{
\itemize{ List of element:
 \item S         : Means and trials matrix
 \item choice    : Choice history vector
 \item proba     : Max probability history vector
 \item time      : Computation time
 \item theta_hat : Final estimated reward expectation of each arm
 \item theta     : Actual reward expectation of each arm}
}
\description{
The epsilon greedy algorithm is used in stochastic bandit with
 finitely many arms problems. At each iteration, a coin is flipped with
 success probability epsilon. If it succeeds arm is chosed at random. If not
 the arm with the highest observed reward expectation. This expectation is
 updated after observing the result of the draw.

 Doing so, this function keeps track of each arm estimated reward expectation
 and number of trials. These are returned at the end of the computation in
 addition to the arm played and at each iteration, the actual reward
 expectations and the computation time.

 See also \code{\link{condition_for_epsilon_greedy}},
 \code{\link{generate_matrix_S}}, and \code{\link{play_arm}}.

 Reward input is checked for correct dimensions and values. See
 \code{\link{bandit_reward_control}}.
}
\examples{
## Generates 10000 numbers from 2 binomial  distributions
set.seed(4434)
K1 <- rbinom(1000, 1, 0.6)
K2 <- rbinom(1000, 1, 0.7)
## Define a dataframe of rewards
visitor_reward <- as.data.frame(cbind(K1,K2) )
#Run epsilon Greedy algorithm
epsilon_greedy_alloc  <- policy_epsilon_greedy(visitor_reward,epsilon  = 0.25)
epsilon_greedy_alloc$S
barplot(table(epsilon_greedy_alloc$choice),main = "Histogram of choices",
xlab="arm")
epsilon_greedy_alloc$time
epsilon_greedy_alloc$theta_hat
epsilon_greedy_alloc$theta

}
