1:1.3
is.numeric(1)
is.numeric(TRUE)
is.numeric(c(1,2))
1:c(1,2)
is.na(NA)
is.na(c(NA))
is.na(c(NA,1))
t <- as.data.frame(cbind(c(NA,1),c(2,2)))
t
is.na(t)
exists(is.na(t))
?exists
?foreach
?forall
any(is.na(t))
?stop
as.data.frame(c())
a <- as.data.frame(c())
a
tf <- function() (stop("lol"); return(TRUE))
tf <- function() (stop("lol"))
tf()
tf <- function() (stop("lol") return(TRUE))
tf <- function() {stop("lol"); return(TRUE)}
tf()
tf <- function(x) {if(x==1){stop("lol")}else{ return(TRUE)}}
tf(1)
tf(2)
as.data.frame(c(1,2,3))
as.data.frame(c(1,2,TRUE))
data(c(1,2))
data_frame(c(1,2))
tibble(c(1,2))
is.data.frame(tibble(c(1,2)))
w <- tibble(c(1,2))
nrow(w)
?tibble
as.data.frame(matrix(0,1))
as.data.frame(matrix(0,5))
as.data.frame(matrix(0,3,5))
as.data.frame(matrix(0,5,3))
as.data.frame(matrix(0,2,3))
as.data.frame(cbind(c(NA,1,2),
c(2,3,5)))
test()
test()
document()
document()
?UCB
class(matrix(0,2,2))
class(matrix(TRUE,2,2))
matrix(TRUE,2,2)
?colMeans
colMeans(c(1,1))
colMeans(diag(2,2))
rename_files("proba_max_for_UCB.R", "proba_max_for_ucb.R")
paste('bandit', 1:5)
use_test("generate_matrix_S")
identical(matrix(0,3,3), matrix(0,3,3))
identical(matrix(0,3,3), matrix(0,3,4))
identical(matrix(0,3,3), matrix(1,3,3))
test()
test()
document()
is.numeric(1L)
document()
rename_files("thompson_sampling.R", "policy_thompson_sampling.R")
?mapply
t
mapply(f(v)(v!=1 && v!=0), t)
mapply(function(v)(v!=1 && v!=0), t)
mapply(function(v)(v!=1 && v!=0), diag(3))
mapply(function(v)(v!=1 && v!=0), matrix(4,3,4))
v <- as.date.frame(cbind(c(TRUE,FALSE),c(FALSE,FALSE)))
v <- as.datA.frame(cbind(c(TRUE,FALSE),c(FALSE,FALSE)))
v <- as.data.frame(cbind(c(TRUE,FALSE),c(FALSE,FALSE)))
v
as.matrix(v)
mapply(function(v)(v!=1 && v!=0), v)
mapply(function(v)(v!=1 && v!=0), as.matrix(v))
FALSE==1
FALSE==0
as.integer(TRUE)
v
c(TRUE,1)
t
is.na(t)
v
as.integer(v)
mapply(as.integer,as.matrix(v))
as.matrix(v)
mapply(function(v)(v==1 || v==0),as.matrix(v))
as.integer(TRUE)
TRUE!= 0
TRUE!= 1
TRUE!=1 && TRUE!=0
2!=1 && 2!=0
matrix(c(1,2,3,4), nrow=2,ncol=2)
sapply(as.logical, diag(3))
sapply(diag(3), as.logical)
TRUE + 1
TRUE * 1
1 / FALSE
t
mapply(function(v)(v!=1 && v!=0), t)
?is.na
v
v * 1
use_test("control_binary")
c(TRUE,1)
is.numeric(TRUE)
cbind(c("lol","lol"),c(TRUE,FALSE))
a <- cbind(c("lol","lol"),c(TRUE,FALSE))
a*1
"lol"==1
mapply(function(v)(v!=1 && v!=0),a)
as.numeric(a)
is.numeric(a)
is.numeric(diag(3))
is.numeric(matrix(TRUE,2,3))
?stopifnot
t
is.numeric(TRUE)
a
is.numeric(a)
is.numeric(diag(3))
test()
cbind(c(TRUE,FALSE),c(1,2))
test()
matrix(TRUE,2,3)
matrix(TRUE,2,3) * 1
?rbeta
?max
?rbeta
rename_files("epsilon_greedy.R", "policy_epsilon_greedy.R")
rename_files("EXP3.R", "policy_exp3.R")
class(1L)
is.integer(1L)
is.numeric(1L)
document()
document()
document()
library(tidyverse)
rename_files("KL_UCB.R", "policy_kl_ucb.R")
library(devtools)
rename_files("KL_UCB.R", "policy_kl_ucb.R")
class(c(1,2))
class(1)
2Â²
2**2
2**3
?Vectorize
?ifelse
TRUE * 1
FALSE * 1
c(TRUE, FALSE) * 1
document()
document()
load_all()
?policy_kl_ucb
?proba_max_for_ucb
?sample
class(1)
v <- as.matrix(c(TRUE,FALSE))
v
is.numeric(v)
rename_files("LOGITUCB.R", "policy_logitucb.R")
rename_files("LINUCB.R", "policy_linucb.R")
document()
?bandit4abtest
test()
check()
use("object_evaluation")
library(fs)
use_r("object_evaluation")
rename_files("ctreeucb_rejection_sampling_agorithm.R", policy_ctree_rejection_sampling.R)
rename_files("ctreeucb_rejection_sampling_agorithm.R", "policy_ctree_rejection_sampling.R")
rename_files("TSLINUCB.R", "policy_ts_linucb.R")
rename_files("UCB_rejection_sampling.R", "policy_ucb_rejection_sampling.R")
rename_files("LINUCB_rejection_sampling.R", "policy_linucb_rejection_sampling.R")
rename_files("kernelucb.R", "policy_kernel_ucb.R")
rename_files("DBALINUCB_rejection_sampling.R", "policy_dbalinucb_rejection_sampling.R")
rename_files("dbactree_ucb_rejection_sampling.R", "policy_dbactree_ucb_rejection_sampling.R")
rename_files("dbactreeucb_rejection_sampling.R", "policy_dbactree_ucb_rejection_sampling.R")
rename_files("ctreeucb.R", "policy_ctree_ucb.R")
t <- function(){stop("lol"); return TRUE}
t <- function(){stop("lol"); TRUE}
t
t()
a <- t()
a
t <- function(){stop("lol"); "yolo"}
a <- t()
a
array(diag(3), dim=(3,3,3))
array(diag(3), dim=(3,3,3))
array(diag(3),dim=1)
array(diag(3),dim=3)
array(diag(3),dim=c(3,3,3))
?%*%
?"%*%"
diag(3) %*% diag(3)
document()
library(devtools)
library(tidyverse)
document()
document()
?vapplt
?vapply
t <- function(){if(TRUE) message("lol");1}
t()
?paste()
paste("lol",1)
paste(c(1,"lol"))
?mvnorm
library(MASS)
?mvnorm
?mnrnorm
?mvrnorm
size.tot = 1000
use_r("evaluation_ucb")
install.packages("sloop")
library(sloop)
methods("list")
?list
?dataframe
?matrix
class(matrix)
class(diag(3))
is.numeric(diag(3))
load_all()
library(devtools)
load_all()
load_all()
load_all()
u <- new("UCB", visitor_reward = diag(3), alpha = 1)
load_all()
u <- new("UCB", visitor_reward = diag(3), alpha = 1)
is(u)
load_all()
u <- UCB(diag(2), 3)
u <- UCB("lol", 3)
load_all()
u <- UCB("lol", 3)
load_all()
u <- UCB("lol", 3)
validObject(u)
u
load_all()
UCB(diag(1), 3)
UCB("lol", 3)
load_all()
UCB("lol", 3)
UCB(diag(1), 3)
load_all()
UCB(as.data.frame(diag(3)), 3)
K <- cbind(c(1,2,3), c(3,5,1))
K
K <- data.frame(K)
K
UCB(K, 3)
is.data.frame(K)
load_all()
UCB(K, 3)
?plot
plot(K)
load_all()
plot(c(1,2))
load_all()
load_all()
u <- UCB(K, 3)
plot(u)
load_all()
u <- UCB(K, 3)
plot(u)
class(c(1,2))
library(tictoc)
tic()
a <- toc()
a
class(a)
b <- diag(3)
class(b[1,])
class(K)
load_all()
class(K)
class(NULL)
data.frame()
load_all()
load_all()
K1 <- rbinom(100,1,0.5)
K2 <- rbinom(100,1,0.4)
K3 <- rbinom(100,1,0.8)
K <- as.data.frame(cbind(K1,K2,K3))
K
u <- UCB(K, 1)
load_all()
u <- UCB(K, 1)
load_all()
K
u <- UCB(K, 1)
load_all()
u <- UCB(K, 1)
t <- policy_ucb(K,1)
t@S
t
load_all()
u <- UCB(K, 1)
t
t$time
load_all()
u <- UCB(K, 1)
t$theta
class(t$theta)
load_all()
u <- UCB(K, 1)
load_all()
u <- UCB(K, 1)
class(c(1))
t
class(t$theta)
u <- UCB(K, 1)
t$theta
load_all()
u <- UCB(K, 1)
plot(u)
use_r("evaluation_thompson_sampling")
?plot
clas("lol")
class("lol")
s1 <- "lol"
s2 <- "lol"
s1 == s2
s3 <- "rzea"
s1 == s3
load_all()
plot(c(1,2), type="p")
plot(c(1,2), type="l")
load_all()
load_all()
u <- UCB(K, 1)
plot(u)
plot(u, type="proba")
plot(u, type="pfdsqfdsq")
rename_files("uniform_bandit.R", "policy_uniform.R")
use_r("regret")
r <- rbinom(100,1,0.4)
K1
r <- cbind(K1,K2)
which.max(r)
class(r)
?*mapply
?mapply
m <- matrix(c(1,2,3,2,3,5), nrow=2,ncol=3)
m
sapply(m,1,which.max)
?sapply
apply(m,1,which.max)
apply(m,1,max)
m[]
m[][1]
m[1]
m[2]
m[3]
m[4]
m[][4]
m[1:2]
m[1:2,]
m[c(1,3)*2]
t(m)[c(1,3)*2]
t(m)[c(2,1)*2]
t(m)
m
s <- matrix(ncol=3,byrow=TRUE, c(1,1,2,3))
s <- matrix(ncol=2,byrow=TRUE, c(1,1,2,3))
s
m
m[s]
s <- cbind(1:2, c(3,2))
s
m
m[s]
s <- cbind(1:2, c(3,""))
s <- cbind(1:2, c(3,""))
s <- cbind(1:2, c(3,3))
m[s]
length(c(1,2,3))
apply(m,max)
apply(m,1,max)
load_all()
choice <- rep(1,100)
r
simple_regret(choice,r)
r[,1]
rename_files("regret.R", "reward_regret.R")
rename_files("bandit_reward_control.R", "validity.R")
rename_files("evaluation_ucb.R", "fma_evaluation.R")
class("")
valid_types <- c("ucb", "ts", "exp3", "grdy", "klucb")
?in
?%in%
"ucb" %in% valid_types
"ucfqsb" %in% valid_types
class(c())
load_all()
load_all()
load_all()
load_all()
load_all()
load_all()
load_all()
e <- FMA_evaluation(K,"ucb",1)
load_all()
e <- FMA_evaluation(K,"ucb",1)
K
e <- FMA_evaluation(K,"ucb",1)
load_all()
e <- FMA_evaluation(K,"ucb",1)
e
run(e)
plot(e, type="proba")
plot(e, type="probfv")
o@proba
e@proba
run(e)
e@proba
load_all()
e <- FMA_evaluation(K,"ucb",1)
run(e)
e@proba
K
ff <- policy_ucb(K,1)
f$proba
ff$proba
e
o <- run(o)
o
e <- run(e)
e
load_all()
e <- FMA_evaluation(K,"ucb",1)
e
plot(e)
plot(e, type=proba)
plot(e, type="proba")
load_all()
e <- FMA_evaluation(K,"ucb",1)
plot(e, type = "regret")
load_all()
e <- FMA_evaluation(K,"ucb",1)
plot(e, type = "regret")
load_all()
e <- FMA_evaluation(K,"ucb",1)
plot(e, type = "regret")
K1 <- rbinom(1000, 1, 0.4)
K2 <- rbinom(1000, 1, 0.6)
K3 <- rbinom(1000, 1, 0.5)
K <- cbind(K1,K2,K3)
e <- FMA_evaluation(K,"ucb",1)
e <- FMA_evaluation(as.data.frame(K),"ucb",1)
plot(e, type="regret")
plot(e, type="regfff")
plot(e, type="proba")
plot(e, type="regret")
m
apply(m,1,max)
s
apply(m,1,max) - m[s]
s <- cbind(1:2, c(1,1))
s
apply(m,1,max) - m[s]
m
e
e@choice
c <- e@choice
c
K
choice
c
e
s <- cbind(1:1000, choice)
K[s]
best <- K[2,]
best
best <- K[,2]
best
reg <- best - K[s]
reg
plot(reg)
hist(reg)
?cumsum
plot(cumsum(reg))
K[s]
n <- 0.6 * 1:1000
n
cumsum(rep(0.6,1000))
n <- cumsum(rep(0.6,1000))
plot (n - cumsum(K[s]))
e2 <- FMA_evaluation(K,"ucb",10)
e2 <- FMA_evaluation(as.data.frame(K),"ucb",10)
plot(e2, type="regret")
plot(e2, type="proba")
K[s]
0.6 * 1:1000
0.6 * 1:1000 - K[s]
rep(0.6, 1000) - K[s]
pt <- rep(0.6, 1000) - K[s]
plot(cumsum(pt))
sum(K[s])
plot(K[s])
hist(K[s])
